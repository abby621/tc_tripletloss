name: "CaffeNet"
# classification: GLOG_log_dir=/project/focus/abby/tc_tripletloss/models/logs/mnist/classification/ $CAFFE_ROOT/build/tools/caffe train -solver /project/focus/abby/tc_tripletloss/models/mnist_solver.prototxt -gpu 0
# tripletloss: GLOG_log_dir=/project/focus/abby/tc_tripletloss/models/logs/mnist/tripletloss/ $CAFFE_ROOT/build/tools/caffe train -solver /project/focus/abby/tc_tripletloss/models/mnist_solver.prototxt -weights /project/focus/abby/tc_tripletloss/models/mnist_pretrained.caffemodel -gpu 0
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: false
    # mnist
    crop_size: 28
    mean_file: "/project/focus/datasets/mnist/mnist_mean.binaryproto"
  }
  data_param {
    # mnist
    source: "/project/focus/datasets/mnist/triplet_train_lmdb"
    batch_size: 270
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    # mnist
    crop_size: 28
    mean_file: "/project/focus/datasets/mnist/mnist_mean.binaryproto"
  }
  data_param {
    #mnist
    source: "/project/focus/datasets/mnist/mnist_test_lmdb"
    batch_size: 270
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 12
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "ip1"
  top: "ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# #=================classification==================
# layer {
#   name: "ip2"
#   type: "InnerProduct"
#   bottom: "ip1"
#   top: "ip2"
#   param {
#     lr_mult: 1
#   }
#   param {
#     lr_mult: 2
#   }
#   inner_product_param {
#     num_output: 10
#     weight_filler {
#       type: "xavier"
#     }
#     bias_filler {
#       type: "constant"
#     }
#   }
# }
# layer {
#   name: "accuracy"
#   type: "Accuracy"
#   bottom: "ip2"
#   bottom: "label"
#   top: "accuracy"
#   include {
#     phase: TEST
#   }
# }
# layer {
#   name: "loss"
#   type: "SoftmaxWithLoss"
#   bottom: "ip2"
#   bottom: "label"
#   top: "loss"
# }
#====================tripletloss==================
layer {
 name: "norm2"
 type: "Python"
 bottom: "ip1"
 top: "norm2"
 python_param {
   module: "norm2layer"
   layer: "Norm2Layer"
 }
}
layer {
 name: "ip3"
 type: "InnerProduct"
 bottom: "norm2"
 top: "ip3"
 param {
    lr_mult: 10
    decay_mult: 0
  }
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "triplet_select"
  type: "Python"
  bottom: "ip3"
  bottom: "label"
  top: "anchor"
  top: "positive"
  top: "negative"
  include {
    phase: TRAIN
  }
  python_param {
    module: "tripletselectlayer"
    layer: "TripletSelectLayer"
    param_str:'{"phase":"TRAIN"}'
  }
}
layer {
  name: "triplet_select"
  type: "Python"
  bottom: "ip3"
  bottom: "label"
  top: "anchor"
  top: "positive"
  top: "negative"
  include {
    phase: TEST
  }
  python_param {
    module: "tripletselectlayer"
    layer: "TripletSelectLayer"
    param_str:'{"phase":"TEST"}'
  }
}
layer {
  name: "tripletloss"
  type: "Python"
  bottom: "anchor"
  bottom: "positive"
  bottom: "negative"
  top: "tripletloss"

  python_param {
    module: "tripletlosslayer"
    layer: "TripletLayer"
  }
  loss_weight: 1
}
